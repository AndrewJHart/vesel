// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(function(require) {
  'use strict';
  var Chaplin, Pusher, PusherSocket, Utils, defaults, _;
  _ = require('underscore');
  Chaplin = require('chaplin');
  Pusher = require('pusher');
  Utils = require('lib/utils');
  defaults = {
    key: 'APIKEY',
    channel: 'CHANNELNAME',
    channelSuffix: 'channel',
    messageSuffix: 'message',
    autoListen: true,
    logEvents: true,
    logStats: true,
    filters: {
      status: 'C'
    }
  };
  return PusherSocket = (function() {
    function PusherSocket() {
      this.liveRemove = __bind(this.liveRemove, this);
      this.liveAdd = __bind(this.liveAdd, this);
      this.liveUpdate = __bind(this.liveUpdate, this);
      this.filters = __bind(this.filters, this);
    }

    _.extend(PusherSocket.prototype, Chaplin.EventBroker);

    PusherSocket.prototype.filters = null;

    PusherSocket.prototype.settings = null;

    PusherSocket.prototype.states = {
      last: null,
      current: null
    };

    PusherSocket.prototype.logging = false;

    PusherSocket.prototype.live = function(options) {
      var opts;
      opts = options || {};
      this.settings = _.defaults(defaults, opts);
      if (this.settings != null) {
        if ((this.settings.filters != null) && _.isObject(this.settings.filters)) {
          this.filters = this.settings.filters;
        }
        this.logging = this.settings.logEvents;
        if (this.settings.logStats === true) {
          this.socketStatus();
        }
        if (this.settings.autoListen === true) {
          this.connect();
        }
      }
      return this;
    };

    PusherSocket.prototype.logEventsStates = function() {
      var _this = this;
      Utils.log('PusherSocket#setup triggered');
      if (this.pusher && this.logging) {
        this.pusher.connection.bind('state_change', function(state) {
          Utils.out("PusherSocket.pusher state: " + state.current);
          _this.states = state;
          return _this;
        });
      }
      return this;
    };

    PusherSocket.prototype.getState = function() {
      var _ref;
      console.log("Current Pusher State: " + ((_ref = this.pusher) != null ? _ref.connection.state : void 0));
      return this;
    };

    PusherSocket.prototype.socketStatus = function() {
      Pusher.log = function(message) {
        if (Utils.debug_state === true) {
          return Utils.out(message);
        } else {
          return console.log(message);
        }
      };
      return this;
    };

    PusherSocket.prototype.initPusher = function() {
      if (!this.pusher) {
        if (this.settings.key != null) {
          this.pusher = new Pusher(this.settings.key);
        } else {
          Utils.log('Settings error or key not present for pusher object');
        }
      }
      return this;
    };

    PusherSocket.prototype.initChannel = function() {
      var _this = this;
      if (this.pusher != null) {
        this.dataChannel = this.pusher.subscribe("" + this.settings.channel + "-" + this.settings.channelSuffix);
        this;
      } else {
        setTimeout(function() {
          Utils.log('PusherSocket#initChannel Error on subscribe retrying');
          _this.pusher = new Pusher(_this.settings.key);
          return _this.initChannel();
        }, 2000);
      }
      return this;
    };

    PusherSocket.prototype.connect = function() {
      var _this = this;
      Utils.log('PusherSocket#connect triggered');
      this.initPusher();
      this.initChannel();
      if (this.logging) {
        this.logEventsStates();
      }
      Utils.out('startPusher method triggered', this.pusher, this.dataChannel);
      this.dataChannel.bind("update_" + this.settings.messageSuffix, function(data) {
        Utils.out('Broadcasting pusher Update event: ', data);
        _this.publishEvent('push_update', data);
        _this.liveUpdate(data);
        return _this;
      });
      return this.dataChannel.bind("add_" + this.settings.messageSuffix, function(data) {
        Utils.out('Broadcasting pusher Add event: ', data);
        _this.publishEvent('push_add', data);
        _this.liveAdd(data);
        return _this;
      });
    };

    PusherSocket.prototype.filters = function(filters) {
      if (!filters) {
        return this.filters;
      }
      if ((filters != null) && _.isObject(filters)) {
        filters = filters;
      } else {
        filters = {};
      }
      this.filters = _.defaults(this.settings.filters, filters);
      Utils.log(this.filters);
      return this;
    };

    PusherSocket.prototype.liveUpdate = function(data) {
      var filter, model, value, _ref;
      Utils.log("" + this.constructor.name + ".liveUpdate triggered");
      model = this.get(data.id);
      if (model != null) {
        if (this.filters != null) {
          _ref = this.filters;
          for (filter in _ref) {
            value = _ref[filter];
            if (data[filter] === value) {
              Utils.log("Model with attribute " + filter + " and value " + value + " was removed from collection!");
              this.remove(model);
            }
          }
        } else {
          this.set(model.set(data), {
            remove: false
          });
          this.trigger('change', model);
        }
        Utils.out('model already exists in local collection - updating its properties.');
      } else {
        this.set(data, {
          remove: false
        });
        Utils.log('model was archived & is not present in local collection - updating local collection');
      }
      return this;
    };

    PusherSocket.prototype.liveAdd = function(data) {
      Utils.log("" + this.constructor.name + ".liveAdd triggered");
      this.add(data);
      this.trigger('add', data);
      return this;
    };

    PusherSocket.prototype.liveRemove = function(data) {
      var model;
      Utils.out("" + this.constructor.name + ".liveRemove Triggered");
      model = this.get(data.id);
      if (model != null) {
        this.remove(model);
        Utils.out('removed model id: #{ data.id }');
      } else {
        Utils.log('no model found in this collection that matches pusher data - no removal.');
      }
      return this;
    };

    return PusherSocket;

  })();
});
